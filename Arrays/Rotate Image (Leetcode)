Q) Rotate Image (Leetcode)

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]


class Solution {
    public void rotate(int[][] matrix) {
        
        int n = matrix.length;
        
        //Transpose the matrix
        for(int i = 0 ; i<=n-2 ; i++)
        {
            for(int j = i+1 ; j<=n-1 ; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        
        //Reverse each row
        for(int i = 0 ; i<n ; i++)
        {
            reverse(matrix[i],0,n-1);
        }
    }
    
    private void reverse(int arr[],int start,int end)
    {
        for(int i=start,j=end; i<j ; i++,j--)
        {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp ;
        }
    }
}


Time Complexity: O(N*N) + O(N*N).One O(N*N) is for transposing the matrix and the other is for reversing the matrix.
Space Complexity: O(1)
