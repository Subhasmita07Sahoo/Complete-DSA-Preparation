Q) Rotate Array (Leetcode)

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


****** Brute Force ******

class Solution {
    public void rotate(int[] arr, int k) {
        int n = arr.length;
        if (n == 0)
            return;

        k = k % n;
        if (k == 0)
            return;

        int[] temp = new int[n - k];
        for (int i = 0; i < n - k; i++) {
            temp[i] = arr[i];
        }

        for (int i = n - k; i < n; i++) {
            arr[i - (n - k)] = arr[i];
        }

        for (int i = 0; i < n - k; i++) {
            arr[k + i] = temp[i];
        }
    }
}

Time Complexity: O(n)
Space Complexity: O(n-k)


****** Optimised Approach ******

class Solution {
    public void rotate(int[] arr, int k) {
       k=k%arr.length;
        reverse(arr,0,arr.length-1) ;
        reverse (arr,0,k-1) ;
        reverse(arr,k,arr.length-1);
    }
    
    public void reverse(int[] a, int start, int end) 
    {
        int i,j,temp;
       for(i=start,j=end;i<j;i++,j--) 
        {
           temp=a[i];
           a[i]=a[j];
           a[j]=temp;
        }
     }  
}

Time Complexity: O(2n)
Space Complexity: O(1)
