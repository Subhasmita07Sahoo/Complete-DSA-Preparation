Q)  Majority Element II(Leetcode)

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:

Input: nums = [3,2,3]
Output: [3]

Example 2:

Input: nums = [1]
Output: [1]

Example 3:

Input: nums = [1,2]
Output: [1,2]


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        
        int n = nums.length; 

        int cnt1 = 0, cnt2 = 0; 
        int el1 = Integer.MIN_VALUE; 
        int el2 = Integer.MIN_VALUE; 

        // applying the Extended Boyer Moore's Voting Algorithm:
        for (int i = 0; i < n; i++) 
        {
            if (cnt1 == 0 && el2 != nums[i]) 
            {
                cnt1 = 1;
                el1 = nums[i];
            } 
            else if (cnt2 == 0 && el1 != nums[i])
            {
                cnt2 = 1;
                el2 = nums[i];
            } 
            else if (nums[i] == el1) cnt1++;
            else if (nums[i] == el2) cnt2++;
            else 
            {
                cnt1--; 
                cnt2--;
            }
        }

        List<Integer> ls = new ArrayList<>(); 

        // Manually check if the stored elements in el1 and el2 are the majority elements:
        cnt1 = 0; cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == el1) cnt1++;
            if (nums[i] == el2) cnt2++;
        }

        int mini = (int)(n / 3) + 1;
        if (cnt1 >= mini) ls.add(el1);
        if (cnt2 >= mini) ls.add(el2);

        return ls;
    }
}

Time Complexity: O(N) + O(N)
Space Complexity: O(1)
